/*
* Generated file
*
* Generated from: yang module name: odl-sal-netconf-connector-cfg yang module local name: sal-netconf-connector
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Thu Nov 05 12:03:41 PST 2015
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.md.sal.connector.netconf;
public interface NetconfConnectorModuleMXBean {
    public org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.Host getAddress();

    public void setAddress(org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.Host address);

    public java.lang.Boolean getTcpOnly();

    public void setTcpOnly(java.lang.Boolean tcpOnly);

    public java.lang.Long getMaxConnectionAttempts();

    /**
    * Maximum number of connection retries. Non positive value or null is interpreted as infinity.
    */
    public void setMaxConnectionAttempts(java.lang.Long maxConnectionAttempts);

    public java.lang.Boolean getReconnectOnChangedSchema();

    /**
    * If true, the connector would auto disconnect/reconnect when schemas are changed in the remote device.
    *                              The connector subscribes (right after connect) to base netconf notifications and listens for netconf-capability-change notification
    */
    public void setReconnectOnChangedSchema(java.lang.Boolean reconnectOnChangedSchema);

    public javax.management.ObjectName getBindingRegistry();

    public void setBindingRegistry(javax.management.ObjectName bindingRegistry);

    public org.opendaylight.controller.config.yang.md.sal.connector.netconf.YangModuleCapabilities getYangModuleCapabilities();

    public void setYangModuleCapabilities(org.opendaylight.controller.config.yang.md.sal.connector.netconf.YangModuleCapabilities yangModuleCapabilities);

    public java.lang.Long getKeepaliveDelay();

    /**
    * Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
    *                              If a value <1 is provided, no keepalives will be sent
    */
    public void setKeepaliveDelay(java.lang.Long keepaliveDelay);

    public java.lang.String getPassword();

    public void setPassword(java.lang.String password);

    public javax.management.ObjectName getEventExecutor();

    public void setEventExecutor(javax.management.ObjectName eventExecutor);

    public org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.PortNumber getPort();

    public void setPort(org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.PortNumber port);

    public java.lang.Long getConnectionTimeoutMillis();

    /**
    * Specifies timeout in milliseconds after which connection must be established.
    */
    public void setConnectionTimeoutMillis(java.lang.Long connectionTimeoutMillis);

    public java.lang.Long getDefaultRequestTimeoutMillis();

    /**
    * Timeout for blocking operations within transactions.
    */
    public void setDefaultRequestTimeoutMillis(java.lang.Long defaultRequestTimeoutMillis);

    public javax.management.ObjectName getProcessingExecutor();

    /**
    * Makes up for flaws in netty threading design
    */
    public void setProcessingExecutor(javax.management.ObjectName processingExecutor);

    public java.math.BigDecimal getSleepFactor();

    public void setSleepFactor(java.math.BigDecimal sleepFactor);

    public javax.management.ObjectName getClientDispatcher();

    public void setClientDispatcher(javax.management.ObjectName clientDispatcher);

    public javax.management.ObjectName getDomRegistry();

    public void setDomRegistry(javax.management.ObjectName domRegistry);

    public java.lang.String getUsername();

    public void setUsername(java.lang.String username);

    public java.lang.Integer getBetweenAttemptsTimeoutMillis();

    /**
    * Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt
    */
    public void setBetweenAttemptsTimeoutMillis(java.lang.Integer betweenAttemptsTimeoutMillis);

    public javax.management.ObjectName getKeepaliveExecutor();

    /**
    * Dedicated solely to keepalive execution
    */
    public void setKeepaliveExecutor(javax.management.ObjectName keepaliveExecutor);

}
